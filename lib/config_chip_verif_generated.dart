// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library chip_verif;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

class RegisterInfo {
  RegisterInfo._(this._bc, this._bcOffset);
  factory RegisterInfo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RegisterInfo> reader = _RegisterInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get fieldname =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get address => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  double get value =>
      const fb.Float32Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  bool get fixedpoint =>
      const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'RegisterInfo{fieldname: ${fieldname}, address: ${address}, value: ${value}, fixedpoint: ${fixedpoint}}';
  }
}

class _RegisterInfoReader extends fb.TableReader<RegisterInfo> {
  const _RegisterInfoReader();

  @override
  RegisterInfo createObject(fb.BufferContext bc, int offset) =>
      RegisterInfo._(bc, offset);
}

class RegisterInfoBuilder {
  RegisterInfoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addFieldnameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addAddress(int? address) {
    fbBuilder.addUint64(1, address);
    return fbBuilder.offset;
  }

  int addValue(double? value) {
    fbBuilder.addFloat32(2, value);
    return fbBuilder.offset;
  }

  int addFixedpoint(bool? fixedpoint) {
    fbBuilder.addBool(3, fixedpoint);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RegisterInfoObjectBuilder extends fb.ObjectBuilder {
  final String? _fieldname;
  final int? _address;
  final double? _value;
  final bool? _fixedpoint;

  RegisterInfoObjectBuilder({
    String? fieldname,
    int? address,
    double? value,
    bool? fixedpoint,
  })  : _fieldname = fieldname,
        _address = address,
        _value = value,
        _fixedpoint = fixedpoint;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fieldnameOffset =
        _fieldname == null ? null : fbBuilder.writeString(_fieldname!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, fieldnameOffset);
    fbBuilder.addUint64(1, _address);
    fbBuilder.addFloat32(2, _value);
    fbBuilder.addBool(3, _fixedpoint);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}

class ChipTestConfig {
  ChipTestConfig._(this._bc, this._bcOffset);
  factory ChipTestConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChipTestConfig> reader = _ChipTestConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get chipfunctionname =>
      const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<RegisterInfo>? get registers =>
      const fb.ListReader<RegisterInfo>(RegisterInfo.reader)
          .vTableGetNullable(_bc, _bcOffset, 6);
  int get inputtype => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get outputtype =>
      const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'ChipTestConfig{chipfunctionname: ${chipfunctionname}, registers: ${registers}, inputtype: ${inputtype}, outputtype: ${outputtype}}';
  }
}

class _ChipTestConfigReader extends fb.TableReader<ChipTestConfig> {
  const _ChipTestConfigReader();

  @override
  ChipTestConfig createObject(fb.BufferContext bc, int offset) =>
      ChipTestConfig._(bc, offset);
}

class ChipTestConfigBuilder {
  ChipTestConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addChipfunctionnameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int addRegistersOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addInputtype(int? inputtype) {
    fbBuilder.addUint32(2, inputtype);
    return fbBuilder.offset;
  }

  int addOutputtype(int? outputtype) {
    fbBuilder.addUint32(3, outputtype);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChipTestConfigObjectBuilder extends fb.ObjectBuilder {
  final String? _chipfunctionname;
  final List<RegisterInfoObjectBuilder>? _registers;
  final int? _inputtype;
  final int? _outputtype;

  ChipTestConfigObjectBuilder({
    String? chipfunctionname,
    List<RegisterInfoObjectBuilder>? registers,
    int? inputtype,
    int? outputtype,
  })  : _chipfunctionname = chipfunctionname,
        _registers = registers,
        _inputtype = inputtype,
        _outputtype = outputtype;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chipfunctionnameOffset = _chipfunctionname == null
        ? null
        : fbBuilder.writeString(_chipfunctionname!);
    final int? registersOffset = _registers == null
        ? null
        : fbBuilder.writeList(
            _registers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, chipfunctionnameOffset);
    fbBuilder.addOffset(1, registersOffset);
    fbBuilder.addUint32(2, _inputtype);
    fbBuilder.addUint32(3, _outputtype);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
